# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: connstats.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0f\x63onnstats.proto\x12\x11\x63onnstatsprotobuf\"\xd2\x01\n\x0e\x43onnectionStat\x12\x10\n\x08protocol\x18\x01 \x01(\t\x12\x0c\n\x04l_ip\x18\x02 \x01(\t\x12\x0c\n\x04r_ip\x18\x03 \x01(\t\x12\x0e\n\x06l_port\x18\x04 \x01(\r\x12\x0e\n\x06r_port\x18\x05 \x01(\r\x12\x12\n\npackets_in\x18\x06 \x01(\r\x12\x13\n\x0bpackets_out\x18\x07 \x01(\r\x12\x10\n\x08ts_start\x18\x08 \x01(\x04\x12\x12\n\nts_current\x18\t \x01(\x04\x12\x10\n\x08\x62ytes_in\x18\n \x01(\x04\x12\x11\n\tbytes_out\x18\x0b \x01(\x04\"\x0e\n\x0cStatsRequest\"A\n\nStatsReply\x12\x33\n\x08\x63onnstat\x18\x01 \x03(\x0b\x32!.connstatsprotobuf.ConnectionStat2`\n\x0cStatsService\x12P\n\x0c\x43ollectStats\x12\x1f.connstatsprotobuf.StatsRequest\x1a\x1d.connstatsprotobuf.StatsReply\"\x00\x42#Z!ConnectionStats/connstatsprotobufb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'connstats_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z!ConnectionStats/connstatsprotobuf'
  _globals['_CONNECTIONSTAT']._serialized_start=39
  _globals['_CONNECTIONSTAT']._serialized_end=249
  _globals['_STATSREQUEST']._serialized_start=251
  _globals['_STATSREQUEST']._serialized_end=265
  _globals['_STATSREPLY']._serialized_start=267
  _globals['_STATSREPLY']._serialized_end=332
  _globals['_STATSSERVICE']._serialized_start=334
  _globals['_STATSSERVICE']._serialized_end=430
# @@protoc_insertion_point(module_scope)
